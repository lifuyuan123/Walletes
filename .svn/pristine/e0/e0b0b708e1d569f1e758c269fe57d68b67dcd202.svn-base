package com.wallet.bo.wallets.ui.fragment;

import android.app.Activity;
import android.content.Intent;
import android.databinding.ViewDataBinding;
import android.graphics.Color;
import android.support.design.widget.Snackbar;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.ViewTreeObserver;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.authreal.api.AuthBuilder;
import com.authreal.api.OnResultListener;
import com.squareup.picasso.Picasso;
import com.wallet.bo.wallets.R;
import com.wallet.bo.wallets.Utils.GsonUtils;
import com.wallet.bo.wallets.Utils.SharedPreferencesUtil;
import com.wallet.bo.wallets.Utils.dedclick.AntiShake;
import com.wallet.bo.wallets.adapter.CommAdapter;
import com.wallet.bo.wallets.databinding.CreditItemBinding;
import com.wallet.bo.wallets.http.ApiBaseResponseCallback;
import com.wallet.bo.wallets.pojo.Config;
import com.wallet.bo.wallets.pojo.Credit;
import com.wallet.bo.wallets.pojo.Credits;
import com.wallet.bo.wallets.pojo.ISLoan;
import com.wallet.bo.wallets.pojo.LoginOut;
import com.wallet.bo.wallets.ui.activity.CommonWebActivity;
import com.wallet.bo.wallets.ui.activity.LoanActivity;
import com.wallet.bo.wallets.ui.activity.LogingActivity;
import com.wallet.bo.wallets.ui.activity.MyApplication;
import com.wallet.bo.wallets.ui.activity.OpenLoanActivity;
import com.wallet.bo.wallets.ui.activity.ZmWebActivity;
import com.wallet.bo.wallets.ui.weiget.EaseTitleBar;
import com.wallet.bo.wallets.ui.weiget.HoloCircularProgressBar;
import com.wallet.bo.wallets.ui.weiget.ObservableScrollView;
import com.wallet.bo.wallets.ui.weiget.Xcircleindicator;
import com.wallet.bo.wallets.ui.weiget.hp.HorizontalPageLayoutManager;
import com.wallet.bo.wallets.ui.weiget.hp.PagingScrollHelper;
import com.wallet.bo.wallets.ui.weiget.sr.RcScrollview;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import butterknife.BindView;
import butterknife.OnClick;
import cn.fraudmetrix.octopus.aspirit.main.OctopusManager;
import cn.fraudmetrix.octopus.aspirit.utils.Constants;


/**
 * author:ggband
 * date:2017/8/8 9:05
 * email:ggband520@163.com
 * desc:信用
 */
//芝麻信用 url接口地址    ApiUrl第一步检测请求地址，这个如果是空表示认证通过了，然后就直接去请求url


public class CreditFragment extends BaseFragment {


    @BindView(R.id.rv_credit)
    RecyclerView rvCredit;
    @BindView(R.id.holoCircularProgressBar)
    HoloCircularProgressBar holoCircularProgressBar;
    @BindView(R.id.Xcircleindicator)
    Xcircleindicator xCircleindicator;
    @BindView(R.id.scroll_view)
    RcScrollview scrollView;

    @BindView(R.id.ease_titlebar)
    EaseTitleBar easeTitlebar;
    @BindView(R.id.ll_viewAnimal)
    LinearLayout llViewAnimal;
    @BindView(R.id.refreshLayout)
    SwipeRefreshLayout refreshLayout;
    @BindView(R.id.bt_loan)
    TextView btLoan;
    @BindView(R.id.ll_loan)
    LinearLayout llLoan;
    private int height = 259;

    private CommAdapter<Credit> creditCommAdapter;

    private List<Credit> credits = new ArrayList<>();

    private List<Credit> mustCredits = new ArrayList<>();

    PagingScrollHelper scrollHelper = new PagingScrollHelper();

    private HorizontalPageLayoutManager horizontalPageLayoutManager = null;

    private String type = "";

    private boolean isOpen;

    private Credits credit;

//    private PagingItemDecoration pagingItemDecoration = null;


    @Override
    public void initView() {

        EventBus.getDefault().register(this);

        refreshLayout.setColorSchemeColors(
                Color.parseColor("#ff00ddff"),
                Color.parseColor("#ff99cc00"),
                Color.parseColor("#ffffbb33"),
                Color.parseColor("#ffff4444"));

        easeTitlebar.setAlpha(1);
        easeTitlebar.setBackgroundColor(Color.argb(0, 0x00, 0x00, 0x00));

        scrollView.setScrollViewListener(new ObservableScrollView.ScrollViewListener() {
            @Override
            public void onScrollChanged(ObservableScrollView scrollView, int x, int y, int oldx, int oldy) {

                if (y <= height && y >= 0) {
                    float scale = (float) y / height;
                    float alpha = (255 * scale);
                    //layout全部透明
                    easeTitlebar.setAlpha(scale);
                    //只是layout背景透明(仿知乎滑动效果)
                    easeTitlebar.setBackgroundColor(Color.argb((int) alpha, 0xff, 0x11, 0x00));
                } else if (y > height) {
                    easeTitlebar.getBackground().setAlpha(255);
                }

            }

        });


    }

    @Override
    public void setViewUp() {


        creditCommAdapter = new CommAdapter<Credit>(credits, -1, R.layout.credit_item) {

            @Override
            protected void bindViewItemData(ViewDataBinding binding, int position, Credit credit, ViewHolder holder) {

                CreditItemBinding creditItemBinding = (CreditItemBinding) binding;
                Picasso.with(context).load(credit.getImg()).placeholder(R.drawable.im_myhead).error(R.drawable.im_myhead).into(creditItemBinding.imHead);

                creditItemBinding.tvTitle.setText(credit.getName());
            }
        };
        rvCredit.setAdapter(creditCommAdapter);
        scrollHelper.setUpRecycleView(rvCredit);
        if (scrollView != null) {//解决ScroView和refreshLayout冲突
            scrollView.getViewTreeObserver().addOnScrollChangedListener(new ViewTreeObserver.OnScrollChangedListener() {
                @Override
                public void onScrollChanged() {
                    if (refreshLayout != null) {
                        refreshLayout.setEnabled(scrollView.getScrollY() == 0);
                    }
                }
            });
        }

        refreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                if (!SharedPreferencesUtil.getInstance().getBoolean(Config.ISLOGIN, false))
                    refreshLayout.setRefreshing(false);
                else
                    requestCredit();
            }
        });

        initCredit();

        creditCommAdapter.setOnItemClickListener(new CommAdapter.OnItemClickListener() {
            @Override
            public void onItemClick(View item, final long position) {
                if (AntiShake.check(view.getId())) {    //判断是否多次点击
                    return;
                }
                if (!isOpen) {
                    CreditFragment.this.startActivity(new Intent(activity, OpenLoanActivity.class));
                    return;
                }
                final Credit credit = credits.get((int) position);
                if (credit.getI() == 1)//已认证
                    return;
                Log.i(Config.LOGTAG, "name:" + credit.getName());
                Log.i(Config.LOGTAG, "Apiurl:" + credit.getApiUrl());
                Log.i(Config.LOGTAG, "Url:" + credit.getUrl());

                type = credit.getType();

                switch ((int) position) {

                    case 4://支付宝
                        creditMoHe("005004");
                        break;

                    case 0://京东
                    case 2://运营商
                    case 5://社保
                    case 6://学信网
                        Intent intent = new Intent(activity, CommonWebActivity.class);
                        intent.putExtra(CommonWebActivity.TITLE, credit.getName());
                        intent.putExtra(CommonWebActivity.URL, credit.getApiUrl());
                        startActivityForResult(intent, 100);
                        break;

                    case 7:
                        goFaceAuth(credit.getType());
                        break;
                    case 3://芝麻信用
                        if (credit.getApiUrl() == null || TextUtils.isEmpty(credit.getApiUrl())) {
                            requestZmCredit(credit.getUrl());
                            break;
                        }
                        Intent zMIntent = new Intent(activity, ZmWebActivity.class);
                        zMIntent.putExtra(ZmWebActivity.TITLE, credit.getName());
                        zMIntent.putExtra(ZmWebActivity.URL, credit.getApiUrl());
                        startActivityForResult(zMIntent, (int) position);
                        break;

                    case 1://淘宝
                        creditMoHe("005003");
                        break;
                }


            }
        });


    }

    private void goFaceAuth(final String type) {
        AuthBuilder mAuthBuilder = new AuthBuilder(UUID.randomUUID().toString(), "606800ff-8646-454b-bf56-e35c02d8e785", "url", new OnResultListener() {
            @Override
            public void onResult(String s) {
                Log.i(Config.LOGTAG, "result:" + s);
                Map<String, String> stringMap = GsonUtils.GsonToMaps(s);
                stringMap.put("type", type);
                stringMap.put("uid", MyApplication.getLogin().getUserid());
                httpLoader.returnFace(stringMap, new ApiBaseResponseCallback<Object>() {
                    @Override
                    public void onSuccessful(Object o) {
                        toastShow("识别成功");
                        requestCredit();
                    }

                    @Override
                    public void onFinish() {

                    }

                    @Override
                    public void onFailure(String msg) {
                        toastShow(msg);
                    }
                });
            }

        });
        mAuthBuilder.setUserId(MyApplication.getLogin().getUserid());
        //下文调用方法做为范例，请以对接文档中的调用方法为准
        mAuthBuilder.faceAuth(activity);
    }

    private void initHpager(int num) {
        if (num == 0)
            return;
        if (num / 8 == 1)
            xCircleindicator.setVisibility(View.GONE);
        else
            xCircleindicator.setVisibility(View.VISIBLE);
        xCircleindicator.initData(num / 8, 0);
        //设置当前的页面
        xCircleindicator.setCurrentPage(0);
        horizontalPageLayoutManager = new HorizontalPageLayoutManager(2, 4);


        rvCredit.setLayoutManager(horizontalPageLayoutManager);
        scrollHelper.setUpRecycleView(rvCredit);
        scrollHelper.updateLayoutManger();
        scrollHelper.setOnPageChangeListener(new PagingScrollHelper.onPageChangeListener() {
            @Override
            public void onPageChange(int index) {
                if (xCircleindicator != null)
                    xCircleindicator.setCurrentPage(index);
            }
        });

    }


    //初始化征信列表
    private void initCredit() {

        final boolean isLogin = SharedPreferencesUtil.getInstance().getBoolean(Config.ISLOGIN, false);
        if (!isLogin) {
            btLoan.setText("未登录");
            holoCircularProgressBar.animate(holoCircularProgressBar, null, 0 * 0.001f, 1, 0);
            credits.clear();
            creditCommAdapter.notifyDataSetChanged();
            holoCircularProgressBar.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (SharedPreferencesUtil.getInstance().getBoolean(Config.ISLOGIN, false))
                        return;
                    Intent intent = new Intent(activity, LogingActivity.class);
                    intent.putExtra("credit", true);
                    startActivity(intent);
                }
            });
            return;
        }
        btLoan.setText("申请借款");
        holoCircularProgressBar.setProgress(0);
        refreshLayout.post(new Runnable() {
            @Override
            public void run() {
                refreshLayout.setRefreshing(true);
            }
        });
        requestCredit();
    }

    private void requestCredit() {
        if (!refreshLayout.isRefreshing())
            refreshLayout.setRefreshing(true);
        Map<String, String> stringStringMap = new HashMap<>();
        stringStringMap.put("uid", MyApplication.getLogin().getUserid());
        httpLoader.credit(stringStringMap, new ApiBaseResponseCallback<Credits>() {
            @Override
            public void onSuccessful(Credits credits) {
                if (credits.getJudgmentLoanStatus().isLoan())
                    btLoan.setText("立即借款");
                CreditFragment.this.credits.clear();
                credit = credits;
                initHpager(credits.getInfo().size());
                for (Credit credit : credits.getInfo()
                        ) {
                    CreditFragment.this.credits.add(credit);
                    CreditFragment.this.mustCredits.clear();
                    if (credit.getId().equals("1") || credit.getId().equals("2") || credit.getId().equals("5") || credit.getId().equals("6") || credit.getId().equals("14"))
                        CreditFragment.this.mustCredits.add(credit);

                }
                isOpen = credits.isBasicInformationState();
                creditCommAdapter.notifyDataSetChanged();
                holoCircularProgressBar.animate(holoCircularProgressBar, null, credits.getJudgmentLoanStatus().getTotal() * 0.001f, 1000, credits.getJudgmentLoanStatus().getTotal());
            }

            @Override
            public void onFailure(String msg) {

            }

            @Override
            public void onFinish() {
                refreshLayout.setRefreshing(false);
            }
        });
    }

    @Override
    public int getLayoutId() {
        return R.layout.fragment_credit;
    }

    @OnClick({R.id.bt_loan})
    public void onClick(View view) {
        if (AntiShake.check(view.getId())) {
            return;
        }
        switch (view.getId()) {
            case R.id.bt_loan:
                if (!SharedPreferencesUtil.getInstance().getBoolean(Config.ISLOGIN, false)) {
                    Intent intent = new Intent(activity, LogingActivity.class);
                    intent.putExtra("credit", true);
                    startActivity(intent);
                    return;
                }


//                if (!isOpen) {
//                    startActivity(new Intent(activity, OpenLoanActivity.class));
//                    return;
//                }
//                if (credit == null || credit.getJudgmentLoanStatus() == null)
//                    return;
//
//                if (credit.getJudgmentLoanStatus().isLoan()) {
//                    StringBuilder stringBuilder = new StringBuilder();
//                    int tag = 0;//淘宝/京东
//                    for (Credit credit : mustCredits) {
//                        if (credit.getI() != 1) {
//                            if (credit.getId().equals("1") || credit.getId().equals("2")) {
//                                if (credit.getI() != 1)
//                                    tag++;
//                                continue;
//                            }
//                            stringBuilder.append(credit.getName());
//                            stringBuilder.append("、");
//                        }
//                    }
//                    if (tag == 2)
//                        stringBuilder.append("京东/淘宝");
//                    if (stringBuilder.toString().length() > 1) {
//                        Snackbar.make(rvCredit, stringBuilder.toString() + "认证后才能借款额", Snackbar.LENGTH_LONG).setAction("知道了", new View.OnClickListener() {
//                            @Override
//                            public void onClick(View v) {
//
//                            }
//                        }).show();
//                        //   toastShow(stringBuilder.toString() + "认证后才能借款额");
//                    } else
//                        startActivity(new Intent(activity, LoanActivity.class));
//                } else
//                    toastShow("你的额度还不够");
                mainDialog.show();
                Map<String, String> stringMap = new HashMap<>();
                stringMap.put("uid", MyApplication.getLogin().getUserid());
                httpLoader.isLoan(stringMap, new ApiBaseResponseCallback<ISLoan>() {
                    @Override
                    public void onSuccessful(ISLoan isLoan) {
                        if (isLoan.getErrorcode() == 0) {
                            startActivity(new Intent(activity, LoanActivity.class));
                        } else {
                            toastShow(isLoan.getMessage());
                        }
                    }

                    @Override
                    public void onFailure(String msg) {
                        toastShow(msg);
                    }

                    @Override
                    public void onFinish() {
                        mainDialog.dismiss();
                    }
                });

                break;
        }

    }

    @Override
    public void onPause() {
        super.onPause();
    }


    //淘宝征信
    public void taoBaoCredit(Intent data) {
        if (data != null && data.hasExtra(Constants.OCTOPUS_TASK_RESULT_CODE)) {
            int code = data.getIntExtra(Constants.OCTOPUS_TASK_RESULT_CODE, -1);
            if (code == 0) {//code为0表示成功，f非0表示失败
                String taskId = data.getStringExtra(Constants.OCTOPUS_TASK_RESULT_TASKID);//只有code为0时taskid才会有值。
                httpLoader.returnTaobao(MyApplication.getLogin().getUserid(), type, taskId, String.valueOf(code), new ApiBaseResponseCallback<Object>() {

                    @Override
                    public void onSuccessful(Object o) {
                        requestCredit();
                    }

                    @Override
                    public void onFailure(String msg) {
                        toastShow(msg);
                    }

                    @Override
                    public void onFinish() {
                    }
                });
            } else
                toastShow("授权失败：" + code);
        }
    }


    private void creditMoHe(String code) {
        OctopusManager.getInstance().setPrimaryColorResId(R.color.app_theme);//设置导航背景
        OctopusManager.getInstance().setShowWarnDialog(false);//设置成false 不然sdk会报错
        OctopusManager.getInstance().getChannel(getActivity(), code);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        Log.i(Config.LOGTAG, "requestCode:" + requestCode);
        if (resultCode == Activity.RESULT_OK) {
            if (requestCode == 100) {//魔合
                requestZmCredit(data.getStringExtra("url"));
            } else {//芝麻
                requestZmCredit(credits.get(requestCode).getUrl());
            }
        }

    }

    private void requestZmCredit(String url) {

        httpLoader.returnZmCredit(url, new ApiBaseResponseCallback<Object>() {

            @Override
            public void onFinish() {

            }

            @Override
            public void onSuccessful(Object o) {
                requestCredit();
                toastShow("认证成功");
            }

            @Override
            public void onFailure(String msg) {
                toastShow(msg);
            }
        });
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }

    @Subscribe
    public void onEventMainThread(LoginOut loginOut) {
        initCredit();
    }


}


