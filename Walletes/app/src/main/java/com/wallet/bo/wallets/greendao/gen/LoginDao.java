package com.wallet.bo.wallets.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wallet.bo.wallets.pojo.Login;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN".
*/
public class LoginDao extends AbstractDao<Login, Long> {

    public static final String TABLENAME = "LOGIN";

    /**
     * Properties of entity Login.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UID = new Property(0, Long.class, "uID", true, "_id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Head_img = new Property(2, String.class, "head_img", false, "HEAD_IMG");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Cname = new Property(4, String.class, "cname", false, "CNAME");
        public final static Property Card = new Property(5, String.class, "card", false, "CARD");
        public final static Property Units = new Property(6, String.class, "units", false, "UNITS");
        public final static Property Mail = new Property(7, String.class, "mail", false, "MAIL");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property Address = new Property(9, String.class, "address", false, "ADDRESS");
        public final static Property Contacts = new Property(10, int.class, "contacts", false, "CONTACTS");
    };


    public LoginDao(DaoConfig config) {
        super(config);
    }
    
    public LoginDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uID
                "\"USERID\" TEXT," + // 1: userid
                "\"HEAD_IMG\" TEXT," + // 2: head_img
                "\"NAME\" TEXT," + // 3: name
                "\"CNAME\" TEXT," + // 4: cname
                "\"CARD\" TEXT," + // 5: card
                "\"UNITS\" TEXT," + // 6: units
                "\"MAIL\" TEXT," + // 7: mail
                "\"PHONE\" TEXT," + // 8: phone
                "\"ADDRESS\" TEXT," + // 9: address
                "\"CONTACTS\" INTEGER NOT NULL );"); // 10: contacts
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Login entity) {
        stmt.clearBindings();
 
        Long uID = entity.getUID();
        if (uID != null) {
            stmt.bindLong(1, uID);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(3, head_img);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String cname = entity.getCname();
        if (cname != null) {
            stmt.bindString(5, cname);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(6, card);
        }
 
        String units = entity.getUnits();
        if (units != null) {
            stmt.bindString(7, units);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(8, mail);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
        stmt.bindLong(11, entity.getContacts());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Login entity) {
        stmt.clearBindings();
 
        Long uID = entity.getUID();
        if (uID != null) {
            stmt.bindLong(1, uID);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(3, head_img);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String cname = entity.getCname();
        if (cname != null) {
            stmt.bindString(5, cname);
        }
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(6, card);
        }
 
        String units = entity.getUnits();
        if (units != null) {
            stmt.bindString(7, units);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(8, mail);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
        stmt.bindLong(11, entity.getContacts());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Login readEntity(Cursor cursor, int offset) {
        Login entity = new Login( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // head_img
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // card
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // units
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mail
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
            cursor.getInt(offset + 10) // contacts
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Login entity, int offset) {
        entity.setUID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHead_img(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCard(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnits(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setContacts(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Login entity, long rowId) {
        entity.setUID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Login entity) {
        if(entity != null) {
            return entity.getUID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
